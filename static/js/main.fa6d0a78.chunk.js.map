{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","components/About.js","components/Home.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","style","color","to","title","id","about","name","value","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","heading","rows","placeholder","backgroundColor","onChange","event","target","newText","showAlert","toLocaleLowerCase","wor","split","i","length","str1","join","document","getElementById","select","navigator","clipboard","writeText","About","defaultProps","Home","setMode","colr","setcolr","setAlert","message","setTimeout","cls","body","exact","path","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.fa6d0a78.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <>\r\n            <div className=\"container\">\r\n                <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                    {capitalize(props.alert.type)}: {props.alert.msg}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Alert;\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`} >\r\n        <div className=\"container-fluid\" >\r\n          <Link className=\"navbar-brand\" style={{color: props.mode ===\"light\"? \"\" : \"white\"}} to=\"/\">{props.title}</Link>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\" >\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\" >\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link active\" style={{color: props.mode ===\"light\"? \"\" : \"white\"}} aria-current=\"page\" to=\"/\">Home</Link>\r\n              </li>\r\n\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" style={{color: props.mode ===\"light\"? \"\" : \"white\"}} to=\"/about\">{props.about}</Link>\r\n              </li>\r\n            </ul>\r\n\r\n            <div className={`form-check form-check-inline mx-2 text-${props.mode === \"light\" ? \"dark\" :\"light\"}`}>\r\n              <input className=\"form-check-input\" type=\"radio\" name=\"exampleRadios\" id=\"exampleRadios1\" value=\"option1\" onClick={() => {props.toggleMode(\"green\")}} />\r\n              <label className=\"form-check-label\" htmlFor=\"exampleRadios1\">\r\n                Green\r\n              </label>\r\n            </div>\r\n            <div className={`form-check mx-2 text-${props.mode === \"light\" ? \"dark\" :\"light\"}`}>\r\n              <input className=\"form-check-input\" type=\"radio\" name=\"exampleRadios\" id=\"exampleRadios2\" value=\"option2\" onClick={() => {props.toggleMode(\"red\")}} />\r\n              <label className=\"form-check-label\" htmlFor=\"exampleRadios2\">\r\n                Red\r\n              </label>\r\n            </div>\r\n            <div className={`form-check mx-2 text-${props.mode === \"light\" ? \"dark\" :\"light\"}`}>\r\n              <input className=\"form-check-input\" type=\"radio\" name=\"exampleRadios\" id=\"exampleRadios3\" value=\"option3\" onClick={() => {props.toggleMode(\"yellow\")}} />\r\n              <label className=\"form-check-label\" htmlFor=\"exampleRadios3\">\r\n                Yellow\r\n              </label>\r\n            </div>\r\n            <div className={`form-check mx-2 text-${props.mode === \"light\" ? \"dark\" :\"light\"}`}>\r\n              <input className=\"form-check-input\" type=\"radio\" name=\"exampleRadios\" id=\"exampleRadios4\" value=\"option4\" onClick={() => {props.toggleMode(\"blue\")}} />\r\n              <label className=\"form-check-label\" htmlFor=\"exampleRadios4\">\r\n                Blue\r\n              </label>\r\n            </div>\r\n            <div className={`form-check mx-2 text-${props.mode === \"light\" ? \"dark\" :\"light\"}`}>\r\n              <input className=\"form-check-input\" type=\"radio\" name=\"exampleRadios\" id=\"exampleRadios5\" value=\"option5\" onClick={() => {props.toggleMode(\"light\")}} />\r\n              <label className=\"form-check-label\" htmlFor=\"exampleRadios5\">\r\n                Light\r\n              </label>\r\n            </div>\r\n\r\n            <div className={`form-check mx-2 text-${props.mode === \"light\" ? \"dark\" :\"light\"}`}>\r\n              <input className=\"form-check-input\" type=\"radio\" name=\"exampleRadios\" id=\"exampleRadios6\" value=\"option6\" onClick={() => {props.toggleMode(\"dark\")}} />\r\n              <label className=\"form-check-label\" htmlFor=\"exampleRadios6\">\r\n                Dark\r\n              </label>\r\n            </div>\r\n\r\n            {/* <div className={`form-check form-switch text-${props.mode === \"light\" ? \"dark\" :\"light\"}`}>\r\n              <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\" />\r\n              <label className=\"form-check-label \" htmlFor=\"flexSwitchCheckDefault\">{`${props.mode === \"light\" ? \"Enable\" : \"Disable\"}`} Darkmode</label>\r\n            </div> */}\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {title: PropTypes.string.isRequired,\r\n    about: PropTypes.string.isRequired,\r\n}\r\n\r\nNavbar.defaultProps ={\r\n    title: 'Set title Here',\r\n    about: 'Set about text here'\r\n}","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const [text, setText] = useState(\"\")\r\n\r\n    // Uppercase function\r\n    const handleUpClick =() => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Uppercase!\",\"success\");\r\n    }\r\n\r\n    // Lowercase function\r\n    const handleLowClick =() => {\r\n        let newText = text.toLocaleLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lowercase!\",\"success\");\r\n    }\r\n\r\n    // Capitalize each word function\r\n    const handleCewClick =() =>{\r\n        let wor = text.split(\" \");\r\n        for (var i = 0; i< wor.length; i++){\r\n            wor[i] = wor[i].charAt(0).toUpperCase() + wor[i].slice(1);\r\n        }\r\n        let str1 = wor.join(\" \");\r\n        setText(str1);\r\n        props.showAlert(\"Capitalize each word!\",\"success\");\r\n    }\r\n\r\n    // Copy to Clipboard function\r\n    const handleCopy =() => {\r\n        var text =document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Coppied to Clipboard!\",\"success\");\r\n    }\r\n    // Cleared all text function\r\n    const handleClearClick =() => {\r\n        setText(\"\");\r\n        props.showAlert(\"Cleared all text!\", \"success\")\r\n    }\r\n\r\n    //Remove extra spaces function\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Removed the extra Spaces!\",\"success\");\r\n    }\r\n\r\n    //Remove all spaces function\r\n    const handleSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\"\"));\r\n        props.showAlert(\"Removed all Spaces!\",\"success\");\r\n    }\r\n\r\n    // On Change function\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container mb-3 \" style={{color:props.mode ===\"light\"? \"#212529\" :\"rgb(252 240 240)\"}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <label htmlFor=\"myBox\" className=\"form-label \"></label>\r\n                {/* <textarea className=\"form-control \" id=\"myBox\" rows=\"10\" placeholder=\"Enter text here\" style={{backgroundColor: props.mode ===\"light\"? \"white\" :\"#051f39\", color:props.mode ===\"dark\"? \"rgb(252 240 240)\" :\"black\"}} value={text} onChange={handleOnChange}></textarea> */}\r\n                <textarea className=\"form-control \" id=\"myBox\" rows=\"10\" placeholder=\"Enter text here\" style={{backgroundColor: \"#ffffff24\" , color: props.mode ===\"light\"? \"black\" : \"white\"}} value={text} onChange={handleOnChange}></textarea>\r\n            </div>\r\n            <div className={`btn btn-${props.mode === 'light' ? \"primary\" : props.mode}`} onClick={handleUpClick}>Convert to Uppercase</div>\r\n            <div className={`btn btn-${props.mode === 'light' ? \"primary\" : props.mode} mx-3`} onClick={handleLowClick}>Convert to Lowercase</div>\r\n            <div className={`btn btn-${props.mode === 'light' ? \"primary\" : props.mode} mx-3`} onClick={handleCewClick}>Capitalize each word</div>\r\n            <div className={`btn btn-${props.mode === 'light' ? \"primary\" : props.mode} mx-3`} onClick={handleCopy}>Copy Text</div>\r\n            <div className={`btn btn-${props.mode === 'light' ? \"primary\" : props.mode} mx-3`} onClick={handleClearClick}>Clear Text</div>\r\n            <div className={`btn btn-${props.mode === 'light' ? \"primary\" : props.mode} mx-3`} onClick={handleExtraSpaces}>Remove Extra Space</div>\r\n            <div className={`btn btn-${props.mode === 'light' ? \"primary\" : props.mode} mx-3`} onClick={handleSpaces}>Remove all Space</div>\r\n        </div>\r\n        <div className=\"container my-3 \" style={{color:props.mode ===\"light\"? \"#212529\" :\"rgb(252 240 240)\"}}>\r\n            <h3>Your text summary:</h3>\r\n            <p>{text.split(\" \").length} words and {text.length} characters.</p>\r\n            <p>{text.split(\" \").length * 0.008} min read</p>\r\n            <h3>Preview:</h3>\r\n            <p>{text.length > 0 ? text : \"Enter something in the above box to preview here!\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nTextForm.propTypes={heading: PropTypes.string.isRequired,}\r\nTextForm.defaultProps ={heading: 'Enter text'}\r\n","import React from 'react'\r\n\r\nexport default function About() {\r\n    return (\r\n        <>\r\n         <div className=\"container\">\r\n             <h1 className=\"my-3\">About Us</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                    <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                        Accordion Item #1\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\">\r\n                        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                    <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                        Accordion Item #2\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\">\r\n                        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                    <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                        Accordion Item #3\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\">\r\n                        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            </div> \r\n         </div>   \r\n         <div className=\"container my-4\">\r\n                <button type=\"button\" className=\"btn btn-primary\">Enable dark Mode</button>\r\n         </div>\r\n        </>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\r\nimport Alert from './Alert';\r\nimport Navbar from './Navbar';\r\nimport TextForm from './TextForm';\r\nimport About from './About';\r\nimport { BrowserRouter as Router, Route, Switch, NavLink, Link } from 'react-router-dom';\r\n\r\n\r\n\r\nexport default function Home() {\r\n    const [mode, setMode] = useState('light');  // Weather dark mode is enable or not.\r\n    const [colr, setcolr] = useState('light');\r\n    \r\n    const [alert, setAlert] = useState(null);\r\n\r\n    const showAlert = (message, type) =>{\r\n        setAlert({\r\n        msg: message,\r\n        type: type\r\n        })\r\n\r\n        setTimeout(() => {\r\n        setAlert(null);\r\n        }, 1000);\r\n    }\r\n\r\n    const toggleMode = (cls) => {\r\n        if(cls === \"green\"){\r\n            setMode(\"success\");\r\n            document.body.style.backgroundColor = \"#19261b\";\r\n            showAlert(\"Green mode has been enabled\", \"success\");\r\n            setcolr(\"white\")\r\n            \r\n        } else if(cls === \"red\"){\r\n            setMode(\"danger\");\r\n            document.body.style.backgroundColor = \"#6e2128\";\r\n            showAlert(\"Red mode has been enabled\", \"success\");\r\n            \r\n        } else if(cls === \"yellow\"){\r\n            setMode(\"warning\");\r\n            document.body.style.backgroundColor = \"#453d26\";\r\n            showAlert(\"Yellow mode has been enabled\", \"success\");\r\n            \r\n        } else if(cls === \"blue\"){\r\n            setMode(\"info\");\r\n            document.body.style.backgroundColor = \"#051f39\";\r\n            showAlert(\"Blue mode has been enabled\", \"success\");\r\n            \r\n        } else if(cls === \"light\"){\r\n            setMode(\"light\");\r\n            document.body.style.backgroundColor = \"white\";\r\n            showAlert(\"Lightmode has been enabled\",\"success\");\r\n            \r\n        } else if(cls === 'dark'){\r\n            setMode(\"dark\");\r\n            document.body.style.backgroundColor = \"#494848\";\r\n            showAlert(\"Lightmode has been enabled\",\"success\");\r\n        }\r\n    }   \r\n    return (\r\n        <>\r\n            <Router>\r\n                <Navbar title=\"TextUtils\" about=\"About\" mode={mode} toggleMode={toggleMode} />\r\n                <Alert alert={alert} />\r\n                <Switch>\r\n                    <Route exact path=\"/about\">\r\n                        <About />\r\n                    </Route>\r\n                    <Route exact path=\"/\">\r\n                        <TextForm heading=\"Enter a text to analyze below\" showAlert={showAlert} mode={mode} colr={colr} />\r\n                    </Route>\r\n                </Switch>\r\n            </Router>\r\n        </>\r\n    )\r\n}\r\n","import React  from 'react';\r\nimport './App.css';\r\nimport Home from './components/Home';\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Home />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}